package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/parser"
	"go/printer"
	"go/token"
	"os"
	"strings"

	"github.com/pkg/errors"
	"golang.org/x/tools/imports"
)

type InterfacerCommand struct {
	File    string
	Ignores string
}

func (c *InterfacerCommand) FlagSet() *flag.FlagSet {
	fs := flag.NewFlagSet("interfacer", flag.ExitOnError)
	fs.StringVar(&c.File, "f", os.Getenv("GOFILE"), "source path (required, default: $GOFILE)")
	fs.StringVar(&c.Ignores, "i", "", "ignore fields (comma separated)")
	return fs
}

func (c *InterfacerCommand) Run(args []string) error {
	if c.File == "" {
		return flag.ErrHelp
	}
	f, err := parser.ParseFile(token.NewFileSet(), c.File, nil, parser.AllErrors)
	if err != nil {
		return errors.Wrapf(err, "failed to parse source (path=%v)", c.File)
	}
	st := firstStruct(f)
	if st == nil {
		return errors.Errorf("not found struct in file (path=%v)", c.File)
	}
	interfaceName := strings.Title(st.Name.Name)
	methods := getMethods(f, st)

	ignores := strings.Split(c.Ignores, ",")

	interfaceDecl := toInterfaceDecl(interfaceName, methods)
	constructorDecl := toConstructorDecl(interfaceName, st, ignores)
	genFilename := strings.TrimSuffix(c.File, ".go") + "_gen.go"
	gf := &ast.File{
		Name:    f.Name,
		Imports: f.Imports,
		Decls: []ast.Decl{
			interfaceDecl,
			constructorDecl,
		},
	}
	var buf bytes.Buffer
	printer.Fprint(&buf, token.NewFileSet(), gf)
	b, err := imports.Process(genFilename, buf.Bytes(), nil)
	if err != nil {
		return errors.Wrapf(err, "failed to process imports (path=%v)", c.File)
	}

	w, err := os.Create(genFilename)
	if err != nil {
		return errors.Wrap(err, "failed to generate file")
	}
	defer w.Close()

	fmt.Fprintln(w, `// Code generated by "cg interfacer"; DO NOT EDIT.`)
	if _, err := w.Write(b); err != nil {
		return errors.Wrapf(err, "failed to write (path=%v)", genFilename)
	}

	return nil
}

func firstStruct(f *ast.File) *ast.TypeSpec {
	for _, decl := range f.Decls {
		gd, ok := decl.(*ast.GenDecl)
		if !ok {
			continue
		}
		if gd.Tok != token.TYPE {
			continue
		}
		for _, spec := range gd.Specs {
			ts, ok := spec.(*ast.TypeSpec)
			if !ok {
				continue
			}
			if _, ok := ts.Type.(*ast.StructType); ok {
				return ts
			}
		}
	}
	return nil
}

func getMethods(f *ast.File, st *ast.TypeSpec) []*ast.FuncDecl {
	var methods []*ast.FuncDecl
	for _, decl := range f.Decls {
		fd, ok := decl.(*ast.FuncDecl)
		if !ok {
			continue
		}
		if !fd.Name.IsExported() {
			continue
		}
		if fd.Recv == nil {
			continue
		}
		rt := fd.Recv.List[0].Type
		if se, ok := rt.(*ast.StarExpr); ok {
			rt = se.X
		}
		if st.Name.Name != rt.(*ast.Ident).Name {
			continue
		}
		methods = append(methods, fd)
	}
	return methods
}

func toInterfaceDecl(name string, methods []*ast.FuncDecl) *ast.GenDecl {
	fl := &ast.FieldList{}
	for _, method := range methods {
		fl.List = append(fl.List, &ast.Field{
			Names: []*ast.Ident{method.Name},
			Type:  method.Type,
		})
	}
	return &ast.GenDecl{
		Tok: token.TYPE,
		Specs: []ast.Spec{
			&ast.TypeSpec{
				Name: ast.NewIdent(name),
				Type: &ast.InterfaceType{
					Methods: fl,
				},
			},
		},
	}
}

func toConstructorDecl(interfaceName string, structType *ast.TypeSpec, ignores []string) *ast.FuncDecl {
	fields := structType.Type.(*ast.StructType).Fields
	if fields != nil {
		var fs []*ast.Field
		for _, f := range fields.List {
			var idents []*ast.Ident
			for _, name := range f.Names {
				if isIgnored(name.Name, ignores) {
					continue
				}
				idents = append(idents, name)
			}
			if len(idents) == 0 {
				continue
			}
			field := *f
			field.Names = idents
			fs = append(fs, f)
		}
		if len(fs) != 0 {
			fields = &ast.FieldList{
				List: fs,
			}
		} else {
			fields = nil
		}
	}

	return &ast.FuncDecl{
		Name: ast.NewIdent("New" + interfaceName),
		Type: &ast.FuncType{
			Params: fields,
			Results: &ast.FieldList{
				List: []*ast.Field{
					{Type: ast.NewIdent(interfaceName)},
					{Type: ast.NewIdent("error")},
				},
			},
		},
		Body: &ast.BlockStmt{
			List: []ast.Stmt{
				&ast.ReturnStmt{
					Results: []ast.Expr{
						newInstanceExpr(structType, ignores),
						ast.NewIdent("nil"),
					},
				},
			},
		},
	}
}

func isIgnored(s string, ignores []string) bool {
	for _, ignore := range ignores {
		if s == ignore {
			return true
		}
	}
	return false
}

func newInstanceExpr(structType *ast.TypeSpec, ignores []string) ast.Expr {
	cl := &ast.CompositeLit{
		Type: structType.Name,
	}

	st := structType.Type.(*ast.StructType)
	if st.Fields != nil {
		for _, f := range st.Fields.List {
			if isIgnored(f.Names[0].Name, ignores) {
				continue
			}
			cl.Elts = append(cl.Elts, &ast.KeyValueExpr{
				Key:   f.Names[0],
				Value: f.Names[0],
			})
		}
	}
	return &ast.UnaryExpr{
		Op: token.AND,
		X:  cl,
	}
}
